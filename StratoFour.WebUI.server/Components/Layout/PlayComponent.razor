@using Microsoft.AspNetCore.WebUtilities;
@using StratoFour.Application;
@using StratoFour.Application.GameStrategies;
@using StratoFour.Application.Helpers;

<h3 id="play">Play</h3>

@if (_game == null)
{
    <span>Loading...</span>
}
else
{
    <GameBoardView Game="@_game"></GameBoardView>
    <button @onclick="Surrender">Surrender</button>
    <button @onclick="Rematch">Rematch</button>
}

@code {
    private IGame _game;

    protected override void OnInitialized()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var parsedQuery = QueryHelpers.ParseQuery(uri.Query);
        var gameModeLevel = GameModeLevel.Easy;

        // Currently, only easy level is supported for playing against computer.
        // To support more levels, extend the form and logic.
        var level = parsedQuery.GetValueOrDefault("level", "singleplayer");
        var playerOne = new Player("", "");
        var playerTwo = new Player("", "");

        switch (level)
        {
            case "singleplayer":
                gameModeLevel = GameModeLevel.Easy;
                playerOne = CreateMainPlayerFromUri();
                playerTwo = CreateComputerPlayer(playerOne.Color);
                break;

            case "botvsbot":
                gameModeLevel = GameModeLevel.ApiPlayer;
                playerOne = CreateApiPlayer();
                playerTwo = CreateComputerPlayer(playerOne.Color);
                break;
            case "multiplayer":
                gameModeLevel = GameModeLevel.MultiPlayer;
                playerOne = CreateMainPlayerFromUri();
                break;
        }

        _game = new Game(playerOne, playerTwo, gameModeLevel);
    }

    private Player CreateMainPlayerFromUri()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        var parsedQuery = QueryHelpers.ParseQuery(uri.Query);

        string name = parsedQuery.GetValueOrDefault("name", "Player 1");
        string color = parsedQuery.GetValueOrDefault("color", "#1DAC46");

        return new Player(name, color);
    }

    private Player CreateApiPlayer()
    {
        string color = ColorHelper.GetBluePlanetColor();

        return new Player("Api", color);
    }

    private Player CreateComputerPlayer(string mainPlayerColor)
    {
        string color = ColorHelper.GetBlackPlanetColor();

        while (color == mainPlayerColor)
        {
            color = ColorHelper.GetBlackPlanetColor();
        }

        return new Player("Computer", color);
    }
    private void Surrender()
    {
        NavManager.NavigateTo("/");
    }
    private void Rematch()
    {
        OnInitialized();
        StateHasChanged();
    }
}