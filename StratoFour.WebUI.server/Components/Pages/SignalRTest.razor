@page "/signalr"
@using Application.UserMatching
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Components.Authorization
@inject IUserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>4-Gewinnt Spiel</h3>

<AuthorizeView>
    <NotAuthorized>
        <p>Please login to play.</p>
    </NotAuthorized>
    <Authorized>
        <p>Connected as @userName</p>
        <button @onclick="FindGame">Find Game</button>
    </Authorized>
</AuthorizeView>


@code {
    private int userId;
    private HubConnection hubConnection;
    private string userName;
    private string email; 


    protected override async Task OnInitializedAsync()
    {
        // var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        // var user = authState.User;

        // if (user.Identity.IsAuthenticated)
        // {
        email = await AuthService.GetEmailAsync(/* authState */);
        userName = await AuthService.GetUsernameAsync(/* authState */);

            hubConnection = new HubConnectionBuilder()
            .WithUrl(NavManager.ToAbsoluteUri("/gamehub"))
            .Build();

            hubConnection.On<int>("ReceiveUserId", (id) =>
            {
                userId = id;
            });

            hubConnection.On<int, string>("StartGame", (sessionId, role) =>
            {
                NavManager.NavigateTo($"/game/{sessionId}/{role}");
            });

            await hubConnection.StartAsync();
            await ConnectUser();
        // }
    }

    private async Task ConnectUser()
    {
        await hubConnection.InvokeAsync("ConnectUser", email);
    }

    private async Task FindGame()
    {
        // Beispielhafte Implementierung
        await hubConnection.InvokeAsync("StartGame", userId, 2, 0); // Annahme, dass der Roboter eine ID von 0 hat
    }
}