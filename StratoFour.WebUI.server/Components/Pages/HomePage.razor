@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.WebUtilities
@using StratoFour.Application.Helpers
@inject NavigationManager NavManager;

<h3>HomePage</h3>
<button @onclick="@(async () => await SendRequest(1))">Verbindungstest Spieler1</button>
<button @onclick="@(async () => await SendRequest(2))">Verbindungstestp Spieler2</button>
<button @onclick="handleNewGame">New Game</button>

@code {
    private async Task SendRequest(int player)
    {
        var factory = new MQTTnet.MqttFactory();
        var mqttClient = factory.CreateMqttClient();

        var options = new MQTTnet.Client.MqttClientOptionsBuilder()
            .WithTcpServer("localhost", 1883) // Hier die IP-Adresse und Portnummer des MQTT-Brokers eintragen
            .Build();

        await mqttClient.ConnectAsync(options);
        string playerCommand = "4$" + player.ToString();
        var message = new MQTTnet.MqttApplicationMessageBuilder()
            .WithTopic("send_from_app/position") // Hier das Topic eintragen, über das der Roboter Nachrichten empfängt
            .WithPayload(playerCommand)
            .WithRetainFlag()
            .Build();

        await mqttClient.PublishAsync(message);

        await mqttClient.DisconnectAsync(null);
    }

    private void HandleNewGame()
    {
        var query = new Dictionary<string, string> {
            { "name", "playername" }, { "color",  ColorHelper.GetBluePlanetColor() }
    };

        NavManager.NavigateTo(QueryHelpers.AddQueryString("game", query));
    }
}

@code {

    private void handleNewGame()
    {
        var query = new Dictionary<string, string> {
            { "name", "playername" }, { "color",  ColorHelper.GetBluePlanetColor() }
    };

        NavManager.NavigateTo(QueryHelpers.AddQueryString("game", query));
    }
}

